/* tslint:disable */
/* eslint-disable */
/**
 * Raindrop API
 * Build and integrate tools and applications to help members manage their bookmarks on Raindrop.io
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    '_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'view'?: string;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'cover'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'expanded'?: boolean;
    /**
     * 
     * @type {UserRef}
     * @memberof Collection
     */
    'user'?: UserRef;
    /**
     * 
     * @type {CreatorRef}
     * @memberof Collection
     */
    'creatorRef'?: CreatorRef;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'lastUpdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'lastAction'?: string;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'sort'?: number;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'color'?: string;
    /**
     * 
     * @type {CollectionCollaborators}
     * @memberof Collection
     */
    'collaborators'?: CollectionCollaborators;
    /**
     * 
     * @type {CollectionAccess}
     * @memberof Collection
     */
    'access'?: CollectionAccess;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'author'?: boolean;
}
/**
 * 
 * @export
 * @interface CollectionAccess
 */
export interface CollectionAccess {
    /**
     * 
     * @type {number}
     * @memberof CollectionAccess
     */
    'for'?: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionAccess
     */
    'level'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CollectionAccess
     */
    'root'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CollectionAccess
     */
    'draggable'?: boolean;
}
/**
 * 
 * @export
 * @interface CollectionCollaborators
 */
export interface CollectionCollaborators {
    /**
     * 
     * @type {string}
     * @memberof CollectionCollaborators
     */
    '$ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionCollaborators
     */
    '$id'?: string;
}
/**
 * 
 * @export
 * @interface CollectionRef
 */
export interface CollectionRef {
    /**
     * 
     * @type {string}
     * @memberof CollectionRef
     */
    '$ref'?: string;
    /**
     * 
     * @type {number}
     * @memberof CollectionRef
     */
    '$id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionRef
     */
    'oid'?: number;
}
/**
 * 
 * @export
 * @interface CreatorRef
 */
export interface CreatorRef {
    /**
     * 
     * @type {number}
     * @memberof CreatorRef
     */
    '_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatorRef
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatorRef
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatorRef
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface ListCollections200Response
 */
export interface ListCollections200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ListCollections200Response
     */
    'result'?: boolean;
    /**
     * 
     * @type {Array<Collection>}
     * @memberof ListCollections200Response
     */
    'items'?: Array<Collection>;
}
/**
 * 
 * @export
 * @interface ListRaindrops200Response
 */
export interface ListRaindrops200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ListRaindrops200Response
     */
    'result'?: boolean;
    /**
     * 
     * @type {Raindrop}
     * @memberof ListRaindrops200Response
     */
    'item'?: Raindrop;
}
/**
 * 
 * @export
 * @interface Raindrop
 */
export interface Raindrop {
    /**
     * 
     * @type {number}
     * @memberof Raindrop
     */
    '_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'excerpt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'type'?: string;
    /**
     * 
     * @type {UserRef}
     * @memberof Raindrop
     */
    'user'?: UserRef;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'cover'?: string;
    /**
     * 
     * @type {Array<RaindropMediaInner>}
     * @memberof Raindrop
     */
    'media'?: Array<RaindropMediaInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Raindrop
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Raindrop
     */
    'important'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Raindrop
     */
    'removed'?: boolean;
    /**
     * 
     * @type {CollectionRef}
     * @memberof Raindrop
     */
    'collection'?: CollectionRef;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'lastUpdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Raindrop
     */
    'domain'?: string;
    /**
     * 
     * @type {CreatorRef}
     * @memberof Raindrop
     */
    'creatorRef'?: CreatorRef;
    /**
     * 
     * @type {number}
     * @memberof Raindrop
     */
    'sort'?: number;
    /**
     * 
     * @type {Array<RaindropHighlightsInner>}
     * @memberof Raindrop
     */
    'highlights'?: Array<RaindropHighlightsInner>;
    /**
     * 
     * @type {number}
     * @memberof Raindrop
     */
    'collectionId'?: number;
}
/**
 * 
 * @export
 * @interface RaindropHighlightsInner
 */
export interface RaindropHighlightsInner {
    /**
     * 
     * @type {string}
     * @memberof RaindropHighlightsInner
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RaindropHighlightsInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof RaindropHighlightsInner
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof RaindropHighlightsInner
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof RaindropHighlightsInner
     */
    'lastUpdate'?: string;
    /**
     * 
     * @type {CreatorRef}
     * @memberof RaindropHighlightsInner
     */
    'creatorRef'?: CreatorRef;
}
/**
 * 
 * @export
 * @interface RaindropMediaInner
 */
export interface RaindropMediaInner {
    /**
     * 
     * @type {string}
     * @memberof RaindropMediaInner
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof RaindropMediaInner
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RaindropMediaInner
     */
    'screenshot'?: boolean;
}
/**
 * 
 * @export
 * @interface RetrieveCollection200Response
 */
export interface RetrieveCollection200Response {
    /**
     * 
     * @type {boolean}
     * @memberof RetrieveCollection200Response
     */
    'result'?: boolean;
    /**
     * 
     * @type {Collection}
     * @memberof RetrieveCollection200Response
     */
    'item'?: Collection;
}
/**
 * 
 * @export
 * @interface UserRef
 */
export interface UserRef {
    /**
     * 
     * @type {number}
     * @memberof UserRef
     */
    '$id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRef
     */
    '$ref'?: string;
}

/**
 * CollectionApi - axios parameter creator
 * @export
 */
export const CollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get root collections.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionApi - functional programming interface
 * @export
 */
export const CollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get root collections.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollectionApi - factory interface
 * @export
 */
export const CollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionApiFp(configuration)
    return {
        /**
         * 
         * @summary Get root collections.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(options?: any): AxiosPromise<ListCollections200Response> {
            return localVarFp.listCollections(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionApi - object-oriented interface
 * @export
 * @class CollectionApi
 * @extends {BaseAPI}
 */
export class CollectionApi extends BaseAPI {
    /**
     * 
     * @summary Get root collections.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public listCollections(options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).listCollections(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a collection.
         * @param {number} id Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollection: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveCollection', 'id', id)
            const localVarPath = `/collection/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a collection.
         * @param {number} id Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCollection(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCollection(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a collection.
         * @param {number} id Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollection(id: number, options?: any): AxiosPromise<RetrieveCollection200Response> {
            return localVarFp.retrieveCollection(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
    /**
     * 
     * @summary Get a collection.
     * @param {number} id Target collection id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public retrieveCollection(id: number, options?: AxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).retrieveCollection(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RaindropsApi - axios parameter creator
 * @export
 */
export const RaindropsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Raindrops in target Collection.
         * @param {number} collectionId Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRaindrops: async (collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('listRaindrops', 'collectionId', collectionId)
            const localVarPath = `/raindrops/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RaindropsApi - functional programming interface
 * @export
 */
export const RaindropsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RaindropsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Raindrops in target Collection.
         * @param {number} collectionId Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRaindrops(collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRaindrops200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRaindrops(collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RaindropsApi - factory interface
 * @export
 */
export const RaindropsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RaindropsApiFp(configuration)
    return {
        /**
         * 
         * @summary List Raindrops in target Collection.
         * @param {number} collectionId Target collection id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRaindrops(collectionId: number, options?: any): AxiosPromise<ListRaindrops200Response> {
            return localVarFp.listRaindrops(collectionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RaindropsApi - object-oriented interface
 * @export
 * @class RaindropsApi
 * @extends {BaseAPI}
 */
export class RaindropsApi extends BaseAPI {
    /**
     * 
     * @summary List Raindrops in target Collection.
     * @param {number} collectionId Target collection id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaindropsApi
     */
    public listRaindrops(collectionId: number, options?: AxiosRequestConfig) {
        return RaindropsApiFp(this.configuration).listRaindrops(collectionId, options).then((request) => request(this.axios, this.basePath));
    }
}



